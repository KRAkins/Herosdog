import os
import logging
import json
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∏")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context):
    try:
        user_id = update.message.from_user.id
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await photo.get_file()
        image_url = file.file_path

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
        await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üîΩ –ù–∞–π—Ç–∏ –¥–µ—à–µ–≤–ª–µ", callback_data="cheaper")],
            [InlineKeyboardButton("üîº –ù–∞–π—Ç–∏ –¥–æ—Ä–æ–∂–µ", callback_data="expensive")],
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏", callback_data="search")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cheaper":
        await query.message.reply_text("üîΩ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ—à–µ–≤–ª–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–∏—Å–∫–∞
    elif query.data == "expensive":
        await query.message.reply_text("üîº –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Ä–æ–∂–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–∏—Å–∫–∞
    elif query.data == "search":
        await query.message.reply_text("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–∏—Å–∫–∞

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()

