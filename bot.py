import logging
import json
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py
from config import TELEGRAM_BOT_TOKEN

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∏")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context):
    try:
        user_id = update.message.from_user.id
        photo = update.message.photo[-1]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await photo.get_file()
        image_url = file.file_path

        await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîΩ –ù–∞–π—Ç–∏ –¥–µ—à–µ–≤–ª–µ", callback_data="cheaper")],
            [InlineKeyboardButton("üîº –ù–∞–π—Ç–∏ –¥–æ—Ä–æ–∂–µ", callback_data="expensive")],
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏", callback_data="search")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "cheaper":
            await query.message.reply_text("üîΩ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ—à–µ–≤–ª–µ...")
        elif query.data == "expensive":
            await query.message.reply_text("üîº –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Ä–æ–∂–µ...")
        elif query.data == "search":
            await query.message.reply_text("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()

 