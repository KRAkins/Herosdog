import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import requests
import os
from config import TELEGRAM_BOT_TOKEN, GOOGLE_API_KEY, SERPAPI_KEY, SEARCH_ENGINE_ID
from user_data import get_user_requests, update_user_requests, user_paid
from payments import get_payment_message

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def search_google_by_image(image_url):
    try:
        url = f"https://www.googleapis.com/customsearch/v1?q=&searchType=image&imgUrl={image_url}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
        response = requests.get(url).json()
        return [item["link"] for item in response.get("items", [])]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ç–æ: {e}")
        return []

async def search_prices_on_google(product_name):
    try:
        url = f"https://serpapi.com/search.json?q={product_name}&tbm=shop&api_key={SERPAPI_KEY}"
        response = requests.get(url).json()
        return [(item["title"], item["link"], item.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")) for item in response.get("shopping_results", [])]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω: {e}")
        return []

async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∏")

async def buy_subscription(update: Update, context):
    await update.message.reply_text(get_payment_message(), parse_mode="Markdown")

async def confirm_payment(update: Update, context):
    user_id = update.message.chat_id
    user_paid(user_id)
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")

async def handle_photo(update: Update, context):
    user_id = update.message.chat_id
    user_data = get_user_requests(user_id)

    if user_data["requests"] >= 3 and not user_data["paid"]:
        keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚ùå –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.\nüí∞ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞ 5 USDT (TON).", reply_markup=reply_markup)
        return
    
    update_user_requests(user_id)

    photo = update.message.photo[-1]
    file = await photo.get_file()
    image_url = file.file_path
    await update.message.reply_text("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ...")

    results = await search_google_by_image(image_url)

    if results:
        keyboard = [
            [InlineKeyboardButton("üí∞ –î–µ—à–µ–≤—ã–µ", callback_data="low_price"),
             InlineKeyboardButton("üíé –î–æ—Ä–æ–≥–∏–µ", callback_data="high_price")],
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏", callback_data="search_all")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"üìå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}\n–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=reply_markup)
        context.user_data["product_links"] = results
    else:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def button_click(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == "buy":
        await buy_subscription(update, context)
        return

async def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy_subscription))
    application.add_handler(CommandHandler("confirm", confirm_payment))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_click))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
