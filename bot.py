from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import requests
import os
import logging
from config import TELEGRAM_BOT_TOKEN, GOOGLE_API_KEY, SERPAPI_KEY, SEARCH_ENGINE_ID
from user_data import get_user_requests, update_user_requests, user_paid
from payments import get_payment_message

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Google API
async def search_google_by_image(image_url):
    url = f"https://www.googleapis.com/customsearch/v1?q=&searchType=image&imgUrl={image_url}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
    response = requests.get(url).json()
    logger.info(f"Google Image Search Response: {response}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    if "items" in response:
        return [item["link"] for item in response["items"]]
    else:
        return []

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω —á–µ—Ä–µ–∑ SerpApi
async def search_prices_on_google(product_name):
    url = f"https://serpapi.com/search.json?q={product_name}&tbm=shop&api_key={SERPAPI_KEY}"
    response = requests.get(url).json()
    logger.info(f"SerpAPI Search Response: {response}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    if "shopping_results" in response:
        return [(item["title"], item["link"], item["price"]) for item in response["shopping_results"]]
    else:
        return []

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∏")

# –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def buy_subscription(update: Update, context):
    await update.message.reply_text(get_payment_message(), parse_mode="Markdown")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
async def confirm_payment(update: Update, context):
    user_id = update.message.chat_id
    user_paid(user_id)
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context):
    user_id = update.message.chat_id
    logger.info(f"User {user_id} sent a photo.")  # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_requests(user_id)
        if user_data["requests"] >= 3 and not user_data["paid"]:
            keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("‚ùå –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.\nüí∞ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞ 5 USDT (TON).", reply_markup=reply_markup)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        update_user_requests(user_id)

        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = await update.message.photo[-1].get_file()
        image_url = photo.file_path
        logger.info(f"Image URL: {image_url}")  # –õ–æ–≥–∏—Ä—É–µ–º URL —Ñ–æ—Ç–æ

        await update.message.reply_text("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
        results = await search_google_by_image(image_url)
        logger.info(f"Search Results: {results}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

        if results:
            keyboard = [
                [InlineKeyboardButton("üí∞ –î–µ—à–µ–≤—ã–µ", callback_data="low_price"),
                 InlineKeyboardButton("üíé –î–æ—Ä–æ–≥–∏–µ", callback_data="high_price")],
                [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏", callback_data="search_all")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"üìå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}\n–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=reply_markup)
            context.user_data["product_links"] = results
        else:
            await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"Error in handle_photo: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "buy":
        await buy_subscription(update, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy_subscription))
    application.add_handler(CommandHandler("confirm", confirm_payment))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_click))

    application.run_polling()

if __name__ == "__main__":
    main()

